pipeline {
    agent any

    tools {
        maven 'Maven'
    }
    
    
    environment {
        SONAR_HOST_URL = 'http://54.89.218.191:9000//' // Update with your SonarQube server URL
        SONAR_LOGIN = credentials('sonar-token') // Credentials ID for SonarQube access token
    }
    
    
    stages {
        stage('Git Checkout') {
           steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/prathikss185/JavaAppDockerized.git']])
            } 
        }
        
        stage('Build') {
            steps {
                // Run Maven clean package
                sh 'ls'
                sh 'pwd'
                sh 'mvn clean package'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                // Execute SonarQube scanner
                withSonarQubeEnv('sonar') {
                    sh "mvn sonar:sonar \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_LOGIN}"
                }
            }
        }
        /*
        stage('Deploy to Artifactory') {
            steps {
                script {
                    // Use Artifactory Maven Gradle DSL for deploying artifacts
                    // You can adjust this according to your build tool (e.g., Maven, Gradle)
                    def server = Artifactory.server('Artifactory')
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "target/*.jar", 
                                "target": "example-repo-local" 
                            }
                        ]
                    }"""
                    server.upload(uploadSpec)
                }
            }
        }
        */
    

    }

    post {
        always {
            // Clean up workspace after the build
            cleanWs()
        }
    }
}
